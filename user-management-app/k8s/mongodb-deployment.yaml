apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: user-management
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: user-management-secrets
              key: MONGODB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: user-management-secrets
              key: MONGODB_ROOT_PASSWORD
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: user-management-config
              key: MONGODB_DATABASE
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        - name: mongo-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc
      - name: mongo-init
        configMap:
          name: mongo-init-config
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: user-management
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init-config
  namespace: user-management
data:
  mongo-init.js: |
    db = db.getSiblingDB('usermanagement');
    db.createCollection('users', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['name', 'email', 'password'],
          properties: {
            name: {
              bsonType: 'string',
              description: 'must be a string and is required'
            },
            email: {
              bsonType: 'string',
              pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$',
              description: 'must be a valid email and is required'
            },
            password: {
              bsonType: 'string',
              minLength: 6,
              description: 'must be a string with minimum 6 characters and is required'
            },
            role: {
              bsonType: 'string',
              enum: ['User', 'Admin', 'Manager'],
              description: 'must be one of the enum values'
            },
            status: {
              bsonType: 'string',
              enum: ['Active', 'Inactive'],
              description: 'must be one of the enum values'
            }
          }
        }
      }
    });
    db.users.createIndex({ email: 1 }, { unique: true });
    db.users.createIndex({ status: 1 });
    db.users.createIndex({ role: 1 });
    db.users.createIndex({ createdAt: -1 });
    print('Database initialized successfully');
